# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-__-_-_-_-_-_-_-_-_-_-_-_
# TERMINAL OP
#
# Color and style codes
BOLD='%B'
RESET='%f%b'
DIR_COLOR='%F{blue}' # Blue for directories
FILE_COLOR='%F{green}' # Green for regular files
#
# Set LS_COLORS for ls and other commands in a Zsh-compatible way
export LS_COLORS="di=$BOLD$DIR_COLOR:fi=$FILE_COLOR"
#
# Define additional color and style codes
RED='%F{red}'
GREEN='%F{green}'
BLUE='%F{blue}'
#
# Function to get Git branch
git_branch() {
  local branch=""
  # Check if the current directory is inside a git repository
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Use git symbolic-ref or git describe to get the branch name in various scenarios (detached HEAD, tags, etc.)
    branch=$(git symbolic-ref -q HEAD || git describe --tags --exact-match 2>/dev/null)
    branch=${branch##refs/heads/} # Remove refs/heads/ from the branch name
  fi
  
  if [[ -n $branch ]]; then
    echo "#-$branch"
  else
    echo "#-"
  fi
}
# Set your prompt with Git branch in parentheses for Zsh
autoload -U add-zsh-hook
add-zsh-hook precmd update_ps1
#
update_ps1() {
    PS1="${BOLD}${RED}==> ${GREEN}%1~ ${BLUE}$(git_branch) $ ${RESET}"
}
#
update_ps1() {
    # Extract the Python environment name
    local py_env=""
    if [[ -n "$VIRTUAL_ENV" ]]; then
        py_env="$(basename $VIRTUAL_ENV)"
    elif [[ -n "$CONDA_DEFAULT_ENV" ]]; then
        py_env="$CONDA_DEFAULT_ENV"
    fi

    # Set your bold colored prompt with Python env, Git branch, and other details
    PS1="${BOLD}${RED}> env-${py_env} ${GREEN}:%1~: ${BLUE}$(git_branch) $ ${RESET}"
}
# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-__-_-_-_-_-_-_-_-_-_-_-_
# ALIAS
alias c="clear"